#pragma once

#define MESSAGE_SIZE 1024
#define NICKNAME_SIZE 64
#define CLIENT_QUEUE_SIZE 64
#define SERVICE_QUEUE "/Queue_serv"
#define MQ_MAX_NUM_OF_MESSAGES 10
#define DEFAULT_VALUE 0
#define PRIORITY_OF_QUEUE 1

typedef enum _chat_action_t
{
    C2S_ACTION_INVALID_TYPE = -1,
    C2S_ACTION_CONNECT = 0,
    C2S_ACTION_DISCONNECT,
    C2S_ACTION_MESSAGE,
    C2S_ACTION_END_OF_ENUM
} chat_action_t;

struct mq_attr attributes_from_client_to_server = 
{
    .mq_flags = DEFAULT_VALUE,
    .mq_maxmsg = MQ_MAX_NUM_OF_MESSAGES,
    .mq_msgsize = sizeof(client_to_server_msg_t),
    .mq_curmsgs = DEFAULT_VALUE
};

int create_queue_service() //for motor.c
{
	printf("я зашел в create_queue_service\n");
    serv_queue = mq_open(SERVICE_QUEUE, O_CREAT | O_RDWR, S_IRUSR | S_IWUSR, &attributes_from_client_to_server);
    if (serv_queue == -1)
    {
        perror("ошибка открытия очереди SERVICE_QUEUE");
        return -1;
    }
    printf("очередь serv_queue успешнот открыта, ФД = %d\n", (int)serv_queue);
    memset(&service_struct, 0, sizeof(service_struct));
    return 0;
}

int wait_connect() //for image_edit.c
{
    printf("Я зашел в wait_connect\n");
    while (service_queue <= 0)
    {
        printf("я в цикле, жду подключения к серверу\n");
        service_queue = mq_open(SERVICE_QUEUE, O_WRONLY);
        if (service_queue == -1)
        {
            perror("mq_open not success\n");
            printf("next try 3..2..1..\nerrno = %d\n", errno);
            sleep(3);
        }
    }
    printf("Подкдючение к очереди произошло успешно, queue descriptor: %d\n", (int)service_queue);
    return 0;
}

// обработка сигнала
struct sigevent sigev;
signal(SIGUSR1, sig_receive_message);
sigev.sigev_notify = SIGEV_SIGNAL;
sigev.sigev_signo = SIGUSR1;
mq_notify(chat_queue, &sigev);

void sig_receive_message() //notify for motor.c and image_edit.c
{
    if (mq_receive(chat_queue, (char *)&struct_to_receive, sizeof(struct_to_receive), NULL) == sizeof(struct_to_receive))
    {
        mq_notify(chat_queue, &sigev);
    }
    if (struct_to_receive.sender.client_pid != client_pid)
    {
        printf("%s: %s\n", struct_to_receive.sender.client_name, struct_to_receive.server_to_client_msg);
    } 
}

